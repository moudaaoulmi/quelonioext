/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package br.pucrio.inf.les.genarch.extension.dsam.springdm.provider;

import br.pucrio.inf.les.genarch.extension.dsam.springdm.util.SpringdmAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class SpringdmItemProviderAdapterFactory extends SpringdmAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SpringdmItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link br.pucrio.inf.les.genarch.extension.dsam.springdm.SpringDynamicModules} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SpringDynamicModulesItemProvider springDynamicModulesItemProvider;

	/**
	 * This creates an adapter for a {@link br.pucrio.inf.les.genarch.extension.dsam.springdm.SpringDynamicModules}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSpringDynamicModulesAdapter() {
		if (springDynamicModulesItemProvider == null) {
			springDynamicModulesItemProvider = new SpringDynamicModulesItemProvider(this);
		}

		return springDynamicModulesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link br.pucrio.inf.les.genarch.extension.dsam.springdm.Bean} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BeanItemProvider beanItemProvider;

	/**
	 * This creates an adapter for a {@link br.pucrio.inf.les.genarch.extension.dsam.springdm.Bean}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBeanAdapter() {
		if (beanItemProvider == null) {
			beanItemProvider = new BeanItemProvider(this);
		}

		return beanItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link br.pucrio.inf.les.genarch.extension.dsam.springdm.BeanReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BeanReferenceItemProvider beanReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link br.pucrio.inf.les.genarch.extension.dsam.springdm.BeanReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBeanReferenceAdapter() {
		if (beanReferenceItemProvider == null) {
			beanReferenceItemProvider = new BeanReferenceItemProvider(this);
		}

		return beanReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link br.pucrio.inf.les.genarch.extension.dsam.springdm.OSGiReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OSGiReferenceItemProvider osGiReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link br.pucrio.inf.les.genarch.extension.dsam.springdm.OSGiReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOSGiReferenceAdapter() {
		if (osGiReferenceItemProvider == null) {
			osGiReferenceItemProvider = new OSGiReferenceItemProvider(this);
		}

		return osGiReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link br.pucrio.inf.les.genarch.extension.dsam.springdm.Beans} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BeansItemProvider beansItemProvider;

	/**
	 * This creates an adapter for a {@link br.pucrio.inf.les.genarch.extension.dsam.springdm.Beans}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBeansAdapter() {
		if (beansItemProvider == null) {
			beansItemProvider = new BeansItemProvider(this);
		}

		return beansItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link br.pucrio.inf.les.genarch.extension.dsam.springdm.Bundle} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BundleItemProvider bundleItemProvider;

	/**
	 * This creates an adapter for a {@link br.pucrio.inf.les.genarch.extension.dsam.springdm.Bundle}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBundleAdapter() {
		if (bundleItemProvider == null) {
			bundleItemProvider = new BundleItemProvider(this);
		}

		return bundleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link br.pucrio.inf.les.genarch.extension.dsam.springdm.BundleContents} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BundleContentsItemProvider bundleContentsItemProvider;

	/**
	 * This creates an adapter for a {@link br.pucrio.inf.les.genarch.extension.dsam.springdm.BundleContents}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBundleContentsAdapter() {
		if (bundleContentsItemProvider == null) {
			bundleContentsItemProvider = new BundleContentsItemProvider(this);
		}

		return bundleContentsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link br.pucrio.inf.les.genarch.extension.dsam.springdm.RequireBundle} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RequireBundleItemProvider requireBundleItemProvider;

	/**
	 * This creates an adapter for a {@link br.pucrio.inf.les.genarch.extension.dsam.springdm.RequireBundle}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRequireBundleAdapter() {
		if (requireBundleItemProvider == null) {
			requireBundleItemProvider = new RequireBundleItemProvider(this);
		}

		return requireBundleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link br.pucrio.inf.les.genarch.extension.dsam.springdm.BundleReq} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BundleReqItemProvider bundleReqItemProvider;

	/**
	 * This creates an adapter for a {@link br.pucrio.inf.les.genarch.extension.dsam.springdm.BundleReq}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBundleReqAdapter() {
		if (bundleReqItemProvider == null) {
			bundleReqItemProvider = new BundleReqItemProvider(this);
		}

		return bundleReqItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link br.pucrio.inf.les.genarch.extension.dsam.springdm.BeanVariant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BeanVariantItemProvider beanVariantItemProvider;

	/**
	 * This creates an adapter for a {@link br.pucrio.inf.les.genarch.extension.dsam.springdm.BeanVariant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBeanVariantAdapter() {
		if (beanVariantItemProvider == null) {
			beanVariantItemProvider = new BeanVariantItemProvider(this);
		}

		return beanVariantItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (springDynamicModulesItemProvider != null) springDynamicModulesItemProvider.dispose();
		if (beanItemProvider != null) beanItemProvider.dispose();
		if (beanReferenceItemProvider != null) beanReferenceItemProvider.dispose();
		if (osGiReferenceItemProvider != null) osGiReferenceItemProvider.dispose();
		if (beansItemProvider != null) beansItemProvider.dispose();
		if (bundleItemProvider != null) bundleItemProvider.dispose();
		if (bundleContentsItemProvider != null) bundleContentsItemProvider.dispose();
		if (requireBundleItemProvider != null) requireBundleItemProvider.dispose();
		if (bundleReqItemProvider != null) bundleReqItemProvider.dispose();
		if (beanVariantItemProvider != null) beanVariantItemProvider.dispose();
	}

}
