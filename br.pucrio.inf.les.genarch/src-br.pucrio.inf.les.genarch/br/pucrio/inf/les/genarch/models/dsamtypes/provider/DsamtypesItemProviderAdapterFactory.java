/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package br.pucrio.inf.les.genarch.models.dsamtypes.provider;

import br.pucrio.inf.les.genarch.models.dsamtypes.util.DsamtypesAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class DsamtypesItemProviderAdapterFactory extends DsamtypesAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public DsamtypesItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link br.pucrio.inf.les.genarch.models.dsamtypes.ClassDependence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClassDependenceItemProvider classDependenceItemProvider;

	/**
	 * This creates an adapter for a {@link br.pucrio.inf.les.genarch.models.dsamtypes.ClassDependence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClassDependenceAdapter() {
		if (classDependenceItemProvider == null) {
			classDependenceItemProvider = new ClassDependenceItemProvider(this);
		}

		return classDependenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link br.pucrio.inf.les.genarch.models.dsamtypes.AspectDependence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AspectDependenceItemProvider aspectDependenceItemProvider;

	/**
	 * This creates an adapter for a {@link br.pucrio.inf.les.genarch.models.dsamtypes.AspectDependence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAspectDependenceAdapter() {
		if (aspectDependenceItemProvider == null) {
			aspectDependenceItemProvider = new AspectDependenceItemProvider(this);
		}

		return aspectDependenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link br.pucrio.inf.les.genarch.models.dsamtypes.FileDependence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FileDependenceItemProvider fileDependenceItemProvider;

	/**
	 * This creates an adapter for a {@link br.pucrio.inf.les.genarch.models.dsamtypes.FileDependence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFileDependenceAdapter() {
		if (fileDependenceItemProvider == null) {
			fileDependenceItemProvider = new FileDependenceItemProvider(this);
		}

		return fileDependenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link br.pucrio.inf.les.genarch.models.dsamtypes.TemplateDependence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TemplateDependenceItemProvider templateDependenceItemProvider;

	/**
	 * This creates an adapter for a {@link br.pucrio.inf.les.genarch.models.dsamtypes.TemplateDependence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTemplateDependenceAdapter() {
		if (templateDependenceItemProvider == null) {
			templateDependenceItemProvider = new TemplateDependenceItemProvider(this);
		}

		return templateDependenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link br.pucrio.inf.les.genarch.models.dsamtypes.ComponentDependence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentDependenceItemProvider componentDependenceItemProvider;

	/**
	 * This creates an adapter for a {@link br.pucrio.inf.les.genarch.models.dsamtypes.ComponentDependence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentDependenceAdapter() {
		if (componentDependenceItemProvider == null) {
			componentDependenceItemProvider = new ComponentDependenceItemProvider(this);
		}

		return componentDependenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link br.pucrio.inf.les.genarch.models.dsamtypes.FolderDependence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FolderDependenceItemProvider folderDependenceItemProvider;

	/**
	 * This creates an adapter for a {@link br.pucrio.inf.les.genarch.models.dsamtypes.FolderDependence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFolderDependenceAdapter() {
		if (folderDependenceItemProvider == null) {
			folderDependenceItemProvider = new FolderDependenceItemProvider(this);
		}

		return folderDependenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link br.pucrio.inf.les.genarch.models.dsamtypes.FragmentDependence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FragmentDependenceItemProvider fragmentDependenceItemProvider;

	/**
	 * This creates an adapter for a {@link br.pucrio.inf.les.genarch.models.dsamtypes.FragmentDependence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFragmentDependenceAdapter() {
		if (fragmentDependenceItemProvider == null) {
			fragmentDependenceItemProvider = new FragmentDependenceItemProvider(this);
		}

		return fragmentDependenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link br.pucrio.inf.les.genarch.models.dsamtypes.IntraDependence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntraDependenceItemProvider intraDependenceItemProvider;

	/**
	 * This creates an adapter for a {@link br.pucrio.inf.les.genarch.models.dsamtypes.IntraDependence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntraDependenceAdapter() {
		if (intraDependenceItemProvider == null) {
			intraDependenceItemProvider = new IntraDependenceItemProvider(this);
		}

		return intraDependenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link br.pucrio.inf.les.genarch.models.dsamtypes.ExtraDependence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExtraDependenceItemProvider extraDependenceItemProvider;

	/**
	 * This creates an adapter for a {@link br.pucrio.inf.les.genarch.models.dsamtypes.ExtraDependence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExtraDependenceAdapter() {
		if (extraDependenceItemProvider == null) {
			extraDependenceItemProvider = new ExtraDependenceItemProvider(this);
		}

		return extraDependenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link br.pucrio.inf.les.genarch.models.dsamtypes.VariableElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariableElementItemProvider variableElementItemProvider;

	/**
	 * This creates an adapter for a {@link br.pucrio.inf.les.genarch.models.dsamtypes.VariableElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariableElementAdapter() {
		if (variableElementItemProvider == null) {
			variableElementItemProvider = new VariableElementItemProvider(this);
		}

		return variableElementItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (classDependenceItemProvider != null) classDependenceItemProvider.dispose();
		if (aspectDependenceItemProvider != null) aspectDependenceItemProvider.dispose();
		if (fileDependenceItemProvider != null) fileDependenceItemProvider.dispose();
		if (templateDependenceItemProvider != null) templateDependenceItemProvider.dispose();
		if (componentDependenceItemProvider != null) componentDependenceItemProvider.dispose();
		if (folderDependenceItemProvider != null) folderDependenceItemProvider.dispose();
		if (fragmentDependenceItemProvider != null) fragmentDependenceItemProvider.dispose();
		if (intraDependenceItemProvider != null) intraDependenceItemProvider.dispose();
		if (extraDependenceItemProvider != null) extraDependenceItemProvider.dispose();
		if (variableElementItemProvider != null) variableElementItemProvider.dispose();
	}

}
